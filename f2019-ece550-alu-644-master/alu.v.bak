module alu(data_operandA, data_operandB, ctrl_ALUopcode,
ctrl_shiftamt, data_result, isNotEqual, isLessThan, overflow);

	input [31:0]data_operandA, data_operandB;
	input [4:0]ctrl_ALUopcode, ctrl_shiftamt;
	output [31:0]data_result;
	output isNotEqual, isLessThan, overflow;
	wire [31:0]out0, out2, out3, out4, out5;

   Muxf Muxf0(
	  .in0(out0[31:0]),
	  .in1(out0[31:0]),
	  .in2(out2[31:0]),
	  .in3(out3[31:0]),
	  .in4(out4[31:0]),
	  .in5(out5[31:0]),
	  .sel(ctrl_ALUopcode[2:0]),
	  .out(data_result[31:0])
	);
	
	adder adder0(
	  .A(data_operandA[31:0]),
	  .B(data_operandB[31:0]),
	  .select(ctrl_ALUopcode[4:0]),
	  .result(out0[31:0]),
	  .overflow(overflow),
	  .isNotEqual(isNotEqual),
	  .isLessThan(isLessThan)
	);
	
	myAnd and0(
	  .in1(data_operandA[31:0]),
	  .in2(data_operandB[31:0]),
	  .out(out2[31:0])
	);
	
	myOr or0(
	  .in1(data_operandA[31:0]),
	  .in2(data_operandB[31:0]),
	  .out(out3[31:0])
	);
	
	SLL sll0(
	  .in(data_operandA[31:0]),
	  .select(ctrl_shiftamt[4:0]),
	  .out(out4[31:0])
	);
	
	SRA sra0(
	  .in(data_operandA[31:0]),
	  .select(ctrl_shiftamt[4:0]),
	  .out(out5[31:0])
	);
	
endmodule